<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.security">Security</Crumb::Item>
	<Crumb::Item @link="docs.security.capabilities">Capabilities</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>Capabilities</h2>
    <p>
		SurrealDB is secure by default and is suitable for all database use cases. It offers powerful features like scripting, functions or network access from within your SurrealQL queries.

		To aid flexibility, SurrealDB doesn't enable any of these features by default and lets the administrator enable them as needed per use case.
	</p>

	<p>When a query wants to use a feature that is not enabled, SurrealDB will reject it.</p>
	<Code @name="docs/security/capabilities/rejected-query.surql" text="Rejected query" />
</Layout::Text>

<Layout::Line />

<Layout::Text text-l text-f {{waypoint "full-list"}}>
	<h2>Capabilities list</h2>
	<h4>List of options for allowing capabilities:</h4>
	<Layout::Table filled>
		<table>
			<thead>
				<tr>
					<th w-20>Option</th>
					<th w-60>Description</th>
					<th w-20>Default</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>
						<code>--allow-scripting</code>
					</td>
					<td>Allow execution of embedded scripting functions</td>
					<td><code>false</code></td>
				</tr>
				<tr>
					<td>
						<code>--allow-guests</code>
					</td>
					<td>Allow non-authenticated users to execute queries when authentication is enabled</td>
					<td><code>false</code></td>
				</tr>
				<tr>
					<td>
						<code>--allow-funcs [&lt;target&gt;,...]</code>
					</td>
					<td>Allow execution of all functions. Optionally, you can provide a comma-separated list of function names to allow</td>
					<td><code>None</code></td>
				</tr>
				<tr>
					<td>
						<code>--allow-net [&lt;target&gt;,...]</code>
					</td>
					<td>Allow all outbound network access. Optionally, you can provide a comma-separated list of targets to allow</td>
					<td><code>None</code></td>
				</tr>
				<tr>
					<td>
						<code>-A, --allow-all</code>
					</td>
					<td>Allow all capabilities above</td>
					<td><code>false</code></td>
				</tr>

			</tbody>
		</table>
	</Layout::Table>
	<p></p>
	<h4>List of options for denying capabilities:</h4>
	<Layout::Table filled>
		<table>
			<thead>
				<tr>
					<th w-20>Option</th>
					<th w-60>Description</th>
					<th w-20>Default</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>
						<code>--deny-scripting</code>
					</td>
					<td>Deny execution of embedded scripting functions</td>
					<td><code>false</code></td>
				</tr>
				<tr>
					<td>
						<code>--deny-guests</code>
					</td>
					<td>Deny non-authenticated users to execute queries when authentication is enabled</td>
					<td><code>false</code></td>
				</tr>
				<tr>
					<td>
						<code>--deny-funcs [&lt;target&gt;,...]</code>
					</td>
					<td>Deny execution of all functions. Optionally, you can provide a comma-separated list of function names to allow</td>
					<td><code>None</code></td>
				</tr>
				<tr>
					<td>
						<code>--deny-net [&lt;target&gt;,...]</code>
					</td>
					<td>Deny all outbound network access. Optionally, you can provide a comma-separated list of targets to allow</td>
					<td><code>None</code></td>
				</tr>
				<tr>
					<td>
						<code>-D, --deny-all</code>
					</td>
					<td>Deny all capabilities above</td>
					<td><code>false</code></td>
				</tr>

			</tbody>
		</table>
	</Layout::Table>

	<p></p>

	<blockquote green text="Note">
		Denied capabilities will override any allowed capability that matches.
	</blockquote>
</Layout::Text>

<Layout::Line />

<Layout::Text text-l text-f {{waypoint "guest-access"}}>
	<h2>Guest access</h2>
	<p>
		Guest access is used when you want to expose certain parts of a database to non-authenticated users.
		It's useful when you want to serve datasets publicly and still require authentication for the rest of the system.
	</p>
	<p>Even when this capability is allowed, a guest user can only execute functions or data operations like SELECT, CREATE, etc, and only if the `PERMISSIONS` clause for the resource being used in the query allows it.</p>

	<Code @name="docs/security/capabilities/guest-queries.surql" text="Guest queries" />
</Layout::Text>

<Layout::Line />

<Layout::Text text-l text-f {{waypoint "functions"}}>
	<h2>Functions</h2>
	<p>
		SurrealDB offers <Link @link="docs.surrealql.functions">built-in functions</Link> to perform common operations like string manipulation, math, etc.
		Users can also define <Link @link="docs.surrealql.statements.define.function">their own functions</Link> with custom logic.
	</p>
	<p>
		In certain environments, you may not want users to use specific functions (i.e. http::*) or execute any custom function at all.
		You can use the allow/deny lists to configure what functions are allowed and what functions are denied.
	</p>

	<Code @name="docs/security/capabilities/functions.surql" text="Functions config" />
</Layout::Text>

<Layout::Line />

<Layout::Text text-l text-f {{waypoint "net"}}>
	<h2>Network</h2>
	<p>
		SurrealDB offers <Link @link="docs.surrealql.functions">http functions</Link> that can access external network endpoints.
	</p>
	<p>
		If you want to allow or deny access to certain network target, you can configure the network options accordingly. Here are some examples:
	</p>

	<Code @name="docs/security/capabilities/network.surql" text="Network config" />
</Layout::Text>

<Layout::Gap large />
