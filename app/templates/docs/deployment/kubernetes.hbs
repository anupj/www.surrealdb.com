<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.deployment">Deployment</Crumb::Item>
	<Crumb::Item @link="docs.deployment.kubernetes">Deploy on Kubernetes</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
	<h2><Devicon @size="50" @type="kubernetes" /> Deploy on Kubernetes</h2>
	<p>In this guide, we will deploy SurrealDB to KIND (Kubernetes in Docker) using TiKV as the storage engine: TiKV is a cloud-native transactional key/value store that integrates well with Kubernetes thanks to their tidb-operator.</p>
	<p>At the end, we will run a few experiments using SurrealQL to verify that we can interact with the new cluster and will destroy some Kubernetes pods to see that data is highly available. </p>

	<h3>Requirements</h3>
	<p>For this guide, we need to install:</p>
	<ul>
		<li><Link @link="https://kubernetes.io/docs/tasks/tools/install-kubectl/"><code>kubectl</code> : </Link> To manage the Kubernetes cluster </li>
		<li><Link @link="https://helm.sh/docs/intro/install/"><code>helm</code> :</Link> To install SurrealDB server and TiKV</li>
		<li><Link @link="https://kind.sigs.k8s.io/"><code>KIND</code></Link>  and <Link @link="https://www.docker.com/"><code>Docker</code> : </Link>To run a local Kubernetes cluster inside a Docker container</li>
		<li><Link @link="https://surrealdb.com/install"><code>Surreal CLI</code> : </Link> To interact with the SurrealDB server</li>
	</ul>

	<h3> Create <Link @link="https://kind.sigs.k8s.io/"><code>KIND</code></Link> Cluster</h3>
	<p>First, we need to create a <Link @link="https://kind.sigs.k8s.io/"><code>KIND</code></Link> cluster. KIND is a tool for running local Kubernetes clusters using Docker container “nodes”. It’s a great tool for experimenting with Kubernetes without spending a lot of time creating a full-featured cluster. </p>
	<p>Run the following command to create a cluster: </p>
	<ol>
		<li> <h5>Let’s create a new cluster:</h5> </li>
		<Code @name="docs/deployment/kubernetes/create-a-new-cluster.sh" text="Create new cluster" />
		<li><h5>Verify we can interact with the created cluster</h5> </li>
		<Code @name="docs/deployment/kubernetes/verify-interaction.sh" text="Verify interaction" />
	</ol>

	<h3> Deploy TiDB operator</h3>
	<p>Now that we have a Kubernetes cluster, we can deploy the <Link @link="https://github.com/pingcap/tidb-operator"><code>TiDB</code> operator </Link>. TiDB operator is a Kubernetes operator that manages the lifecycle of TiDB clusters deployed to Kubernetes.</p><p> You can deploy it following these steps: </p>
	<ol>
		<li><h5>Install CRDS:</h5></li>
		<Code @name="docs/deployment/kubernetes/install-CRDS.sh" text="Install CRDS" />
		<li><h5>Install TiDB Operator Helm chart:</h5></li>
		<Code @name="docs/deployment/kubernetes/install-todb-operator-helm-chart.sh" text="Update Helm repositories" />
		<li><h5>Verify that the Pods are running:</h5></li>
		<Code @name="docs/deployment/kubernetes/verify-tidb-operator.sh" text="Verify TiDB operator" />
	</ol>

	<h3>Create TiDB cluster</h3>
	<p>Now that we have the TiDB Operator running, it’s time to define a TiDB Cluster and let the Operator do the rest. One of the TiDB Cluster components is the TiKV, which we are interested in. <p>Given this is a demo, we will use a basic example cluster, but there are several examples in the official <Link @link="https://github.com/pingcap/tidb-operator/tree/master/examples"> GitHub repo </Link> in case you need a more production-grade deployment</p></p>
	<p>Run the following commands to deploy the TiKV cluster:</p>
	<ol>
		<li><h5>Create a namespace for the <code>TiDB cluster</code>:</h5></li>
		<Code @name="docs/deployment/kubernetes/create-namespace.sh" text="Create namespace" />
		<li><h5>Create the TiDB cluster:</h5></li>
		<Code @name="docs/deployment/kubernetes/create-tidb-cluster.sh" text="Create TiDB cluster" />
		<li><h5>Check the cluster status and wait until it’s ready:</h5></li>
		<Code @name="docs/deployment/kubernetes/verify-tidb-cluster.sh" text="Verify TiDB cluster" />
	</ol>

	<h3>Deploy SurrealDB</h3>
	<p>Now that we have a TiDB cluster running, we can deploy SurrealDB. <p>For this guide, we will use the SurrealDB Helm chart. Run the following commands to deploy SurrealDB:</p></p>
	<ol>
		<li><h5>Add the SurrealDB Charts repository:</h5></li>
		<Code @name="docs/deployment/kubernetes/add-surrealdb-helm-repository.sh" text="Add SurrealDB Helm repository" />
		<li><h5>Get the TIKV PD service url:</h5></li>
		<Code @name="docs/deployment/kubernetes/tikv-pd-service.sh" text="Get TIKV PD service url" />
		<li><h5>Install the SurrealDB Helm chart with the TIKV_URL defined above and with auth disabled so we can create the initial credentials:</h5></li>
		<Code @name="docs/deployment/kubernetes/install-surrealdb-helm-chart.sh" text="Install SurrealDB Helm chart" />
		<li><h5>Connect to the cluster and define the initial credentials (see in the section below how to connect):</h5></li>
		<Code @name="docs/deployment/kubernetes/define-initial-credentials.sh" text="Define initial credentials" />
		<li><h5>Now that the initial credentials have been created, enable authentication:</h5></li>
		<Code @name="docs/deployment/kubernetes/update-surrealdb-helm-chart.sh" text="Update SurrealDB Helm chart" />
	</ol>

	<h3>Run SurrealDB experiments</h3>
	<p>Now that we have SurrealDB running, we can run some experiments to verify that everything is working as expected. <p>For this guide, we will use the Surreal CLI. Run the following commands to run some experiments:</p></p>
	<ol>
		<li><h5>Start port-forwarding to the SurrealDB service:</h5></li>
		<Code @name="docs/deployment/kubernetes/start-port.sh" text="Start pod" />
		<li><h5>Connect to the SurrealDB server using the CLI from another shell:</h5></li>
		<Code @name="docs/deployment/kubernetes/connect-to-surrealdb.sh" text="Connect to surrealDB" />
		<li><h5>Create a SurrealDB database:</h5></li>
		<Code @name="docs/deployment/kubernetes/create-surrealdb-database.sh" text="Create SurrealDB database" />
	</ol>
	<p>The data created above has been persisted to the TiKV cluster. Let’s verify it by deleting the SurrealDB server and let Kubernetes recreate it.</p>
		<Code @name="docs/deployment/kubernetes/run-surrealdb-experiments.sh" text="Run SurrealDB experiments" />
		<p>Connect again and verify the data is still there (you may need to re-run the port-forwarding command):</p>
		<Code @name="docs/deployment/kubernetes/rerun-surrealdb-experiments.sh" text="Run SurrealDB experiments" />

	<blockquote Green text="Note"> <p>Given we are using KIND, we use <code> port-forwarding </code> for demonstration purposes. <p> In a full-featured Kubernetes cluster, you could set <code> ingress.enabled=true </code>  when installing the SurrealDB Helm Chart and it would create a Load Balancer in front of the SurrealDB server pods.</p>  </p></blockquote>

	<h3> Conclusion</h3>
	<p>This guide demonstrated how to deploy SurrealDB on Kubernetes using TiKV as a datastore. From here, you could try and deploy to <Link @link="https://aws.amazon.com/eks/"><code>EKS</code></Link> , <Link @link="https://cloud.google.com/kubernetes-engine"><code>GKE</code></Link> or <Link @link="https://azure.microsoft.com/en-us/products/kubernetes-service"><code>AKS</code></Link>  , and play with the different configurations for the TiKV cluster.</p>
<p>To contribute to this documentation, <Link @link={{github}}>edit this file on GitHub</Link>.</p>
</Layout::Text>


<Layout::Gap small />
